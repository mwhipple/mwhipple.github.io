#+TITLE: My Software Configuration
#+HTML_LINK_HOME: ./index.html
#+HTML_LINK_UP: ./software.html

** SSH

Making sure that an SSH agent is running is a typical way to make use
of password protected SSH keys without needing to repeatedly enter the
password...or more significantly to east that when the invocation
would otherwise not be interactive.

This is recipe I've had sitting around for a bit borrowed from
forgotten sources but some will be tracked down again. Loading upon
starting a shell will launch an agent if determined to be necessary
and attempt to reuse the values from any already running agents.

Currently this will assume the required commands exist on the path...
this should likely be validated both through presence and some form of
signature for security purposes.

*** Define Where to Store Information

The information for reusing an existing agent needs to be stored in a
file chosen by convention so that it can discovered across sessions.

#+BEGIN_SRC bash :tangle ssh.sh

declare -r SSH_ENV="${HOME}/.ssh/environment"

#+END_SRC

*** Define Main Logic

The focus of this script is to reuse the environment from a running
agent, or if no agent is running start one.

#+BEGIN_SRC bash :tangle ssh.sh

ssh::main() {
	if ssh::agent_is_running; then
		ssh::load_env
	else
		ssh::start_agent
	fi
}

#+END_SRC

*** Define How to Start and Populate the Agent

The ssh agent will be started with the output stored for subsequent
sourcing. Echo statements will be suppressed through commenting in the
produced file, and the file itself will have permissions restricted to
the current user only and subsequently loaded.

Finally any keys will be loaded into the agent using ~ssh-add~.

#+BEGIN_SRC bash :tangle ssh.sh

ssh::start_agent() {
	ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
	chmod 600 "${SSH_ENV}"
	ssh::load_env
	ssh-add
}

#+END_SRC

*** Load Settings from an Existing File

If the a file already exists load the values from it. At this point
the values may not be valid but they are loaded for subsequent
potential use.

The output is redirected to the void...why this redirection exists
should be documented.

#+BEGIN_SRC bash :tangle ssh.sh

ssh::load_env() {
	if [[ -f "${SSH_ENV}" ]]; then
		. "${SSH_ENV}" > /dev/null
	fi
}

#+END_SRC

*** Detect Whether Agent is Running

When the file is loaded we can check to see whether the PID is defined
in the ~SSH_AGENT_PID~ variable conventionally output by the agent
and if such a process is deemed running based on the ~/proc~
file system. This is likely not 100% reliable across restarts or any
type of namespacing that may result in PIDs being reused, but should
be good enough.

#+BEGIN_SRC bash :tangle ssh.sh

ssh::agent_is_running() {
	[[ -n "${SSH_AGENT_PID-}" ]] \
	&& [[ -d "/proc/${SSH_AGENT_PID}" ]]
}

#+END_SRC

*** Launch Main

Kick off the main flow.

#+BEGIN_SRC bash :tangle ssh.sh

ssh::main

#+END_SRC

*** Installation

Longer term this will likely all be managed by a Makefile, but at the
moment I don't have make officially in the mix so I'll handle it a
combination of Emacs lisp and bash.

A relatively simple route for installing this type of behavior I
landed on the past is to produce some ~.sh~ files in a conventional
directory and modify the bash initialization script to source all such
files (where the separate files eases management of units of
functionality).

**** Directory Loader

While the pattern of dumping separate files into a directory to be
sourced provides a lot of simplicity it leaves the question of how
those files will actually be sourced. This is by no means a difficult
question but if memory serves its also not quite as simple as just
sourcing all of the files at once, instead requiring the several extra
characters needed to iterate over the files.  It seems like it may be
nicer if I didn't have to care how it would happen nor waste my
precious seconds typing those extra characters so I'll provide a
function to handle this for me.

This could introduce a bootstrapping issue in that I'll need to
somehow load the loader. Thankfully this will not be an issue if the
function is simply defined and the specific file is loaded which is
then used to load the directory in which the loader is defined...the
function will be defined multiple times but that is idempotent and
therefore everything can remain nice and simple

The underlying behavior will rely on being passed multiple files
such as would be expanded from a glob, and take care of sourcing
each resolved file.

#+BEGIN_SRC bash :tangle source_files.sh

mw::source_files() {
	for f; do
		. "${f}"
	done
}    

#+END_SRC

**** Output and Copy Files

Emacs will handle outputting/tangling the file and copying it to the
defined directory (creating the directory as needed).

The directory for now will be hard-coded across the two processes,
org babel should be able to take care of this (as would moving this to
make).

#+BEGIN_SRC emacs-lisp
  (let* ((bashlib-dir (expand-file-name "~/.bash.d/"))
	 (tangled-files (org-babel-tangle))
	 (tangled-sh-files (--filter (string-match-p ".*\.sh$" it) tangled-files)))
    (make-directory bashlib-dir t)
    (dolist (file tangled-sh-files)
	    (copy-file file bashlib-dir t)))
#+END_SRC

**** Configure Bash on Initialization

The relevant file should be added to the bash initialization file if
not already present - a bash function to handle that is present in the
GNU bootstrap script so I'll start with shamelessly stealing that
while doing some minor stylistic cleanup.

***** Insert if Absent

Ideally this functionality should be provided in an entirely portable
form, but since I'm configuring bash it seems reasonable to start in bash.

****** Define Some Bash Setup Logic

Provide some common bash setup to provide stricter behavior. This will
also be invoked as a script so this includes the shebang line and
stashing the script name for later use.

#+BEGIN_SRC bash :tangle iia
#!/usr/bin/env bash

set -euo pipefail

declare -r iia_me="${0}"

#+END_SRC

****** Define Main Function

The original implementation seemed fairly focused on ~.gitignore~ files
but still seems like a decent starting point.

There are some interesting choices in this approach. Much of the
underlying logic effectively involves treating the significant lines in
the file as a set, disallowing duplicates and testing for a change in
cardinality of the new provisional set to determine whether the new
line represents a new unique value that is worth writing.

If the provided line is not significant (i.e. is a comment or a blank
line) this will abort successfully. This should also match how the
original implementation behaves though it was more implicitly done
when trying to add to the set.

The original implementation added the line to the beginning - here
we'll append it while still first writing to a backup file for safety.

This implementation is subject to race conditions if the file is
modified while this running...don't do that. Checking the modification
time may be a worthwhile improvement if this is used widely.

Similarly any errors at the end could leave some debris that we may
want to clean up...though that may be better handled by something like make.


#+BEGIN_SRC bash :tangle iia

mw::insert_if_absent() {
	local -r file=${1}
	local -r str=${2}
	[[ -n $(echo "${str}" | mw::select_significant_lines) ]] || return 0
	mw::guarantee_file "${file}"
	local -r lines=$(cat ${file} | mw::select_significant_lines)
	mw::guarantee_setfulness "${lines}"
	! mw::lineset_contains_line "${lines}" "${str}" || return 0
	{ echo -e "${lines}\n${str}" > "${file}.bak" && mv "${file}.bak" "${file}"; } \
		|| die "insert_if_absent ${file} ${str}: failed"
}

#+END_SRC

****** Return Only Significant Lines

The logic does not care about logically insignificant lines such as
blanks and comments. This should likely be a composed filter but since
the constituent pieces aren't needed yet and it's used multiple times,
I'll start with the whole enchilada.

#+BEGIN_SRC bash :tangle iia

mw::select_significant_lines() {
	sed '/^#/d; /^$/d' "${@}"
}    

#+END_SRC

****** Guarantee That the File is Readable

Verify that ~file~ is usable for content modification, creating as necessary.

Bail out of this does not succeed.

This is tailored to the specific use case so should be refined before
any wider use.

#+BEGIN_SRC bash :tangle iia

mw::guarantee_file() {
	[[ -r "${1}" ]] || touch "${1}"
	[[ -r "${1}" ]] || mw::die "Error: failed to read ignore file: ${1}"
}

#+END_SRC

****** Guarantee That the File Has No Duplicated Lines

Fail if there are any duplicate lines present in ~lines~.

This seems like a generally good idea and is also required for the
subsequent set-style logic.
The original implementation took the file name which could then also
be used in the error message, as the contents are reused it seemed
worth storing and operating on them at which point this function no
longer needs the filename (and therefore loses access). This could
become an issue if multiple files are dealt with at which point this
could likely just become a test and the errors could be surfaced in
the calling code.

#+BEGIN_SRC bash :tangle iia

mw::guarantee_setfulness() {
	local -r dupes=$(echo "${1}" | sort | uniq -d)
	[[ -z "${dupes}" ]] || mw::die "Error: duplicate entries in file: ", ${dupes}
}

#+END_SRC

****** Check if Line is Already Present Within Lines

Determine whether the =lineset= collection of unique lines contains
=lines= by checking whether its addition would increase the set size.

#+BEGIN_SRC bash :tangle iia

mw::lineset_contains_line() {
	[[ $(echo "${1}" | wc -l) == $(echo -e "${1}\n${2}" | sort -u | wc -l) ]]
}

#+END_SRC
****** Feedback Functions

I often define some form of die and warn when writing bash which takes
care of providing some feedback to stderr and possibly exiting with a
status. The implementations from bootstrap are very nice so I've
started to borrow them elsewhere outside of this use.

******* Die

~die~ issues the arguments as a warning and exits with an unsuccessful status
(here the status is hard-coded to 1).

#+BEGIN_SRC bash :tangle iia

mw::die() {
	mw::warn "${@}"
	exit 1
}

#+END_SRC

******* Warn

The warn implementation guards against a custom ~IFS~ wreaking havoc
on the formatting by recursively calling itself with the desired value
of space if that if it does not start with a space, and leaves the formatting to
the ~warnf~ function.

#+BEGIN_SRC bash :tangle iia

mw::warn() {
	case ${IFS} in
		' '*) mw::warnf_ '%s\n' "${*}";;
		*)  (IFS=' '; mw::warn "${@}");;
	esac
}

#+END_SRC

******** Warn Formatting

Provide printf style behavior while prefixing each line with a
sanitized representation of the current script name.
The behavior varies based on whether there are multiple lines or a
single. This may not be required but the single line path is simpler,
less expensive due to avoiding calling the other programs, and is
probably more common.

#+BEGIN_SRC bash :tangle iia

mw::warnf_() {
	local -r warnf_format=${1}
	shift
	local -r nl='
'
	case "${*}" in
		*${nl}*) local -r me_$(printf "${iia_me}" | tr "${nl}|" '??')
			printf "${warnf_format}" "${@}" | sed "s^|${me_}: |" ;;
		*) printf "${iia_me}: ${warnf_format}" "${@}" ;;
	esac >&2
}

#+END_SRC

****** Provide Entrypoint

The above would likely be usable as a function or a script,
and there is almost certainly a useful pattern to support loading it
for either case by detecting whether the invoked command matches the
current file, but since I don't have that readily available for now
I'll just expose this as a script since it more readily matches
immediate needs.

#+BEGIN_SRC bash :tangle iia

mw::insert_if_absent "${@}"

#+END_SRC

***** Call Above 

#+BEGIN_SRC emacs-lisp

  (let ((bash-init (expand-file-name "~/.bash_profile"))
	(insert-if-absent (expand-file-name "./iia")))
    (set-file-modes insert-if-absent (file-modes-symbolic-to-number "u+rwx"))
    (^-buffer-command insert-if-absent (list bash-init ". ~/.bash.d/source_files.sh"))
    (^-buffer-command insert-if-absent (list bash-init "mw::source_files ~/.bash.d/*")))

#+END_SRC
