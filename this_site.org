while I'm not particularly fond of their business model (particularly
the somewhat crippled open source offering) the software itself has
proven to be very robust and efficient with wide adoption...and I have
assorted [[file:sources.org::#nginx][nginx]] stickers and T-shirts (one of which is black-on-black
and probably my favorite tech shirt) so I should probably validate the
swag by using the software. My past experience also gives me
confidence that I can bend it to my wishes in some way or another and
maybe learn some new tricks along the way (I already have a module
sitting around to address the DNS resolution issue which may otherwise
dissuade me).

*** Dockerfile

Certainly one of the most standard dependencies for a containerized
deployment is defining or producing what image is used. In this case
I'll be using a Dockerfile for that since it was what is documented in
the quick start, and it's currently my preferred approach. The preference
is largely out of familiarity - I'm also intrigued by buildpacks, especially
given their pursued reproducibility, but the current lack of official support
for ~arm64~  dissuades me from making the switch (my work computers
are typically Apple silicon though my personal systems tend to remain ~amd64~).

In a scenario such as this one where I'd be looking to make use of an already
available image, I start with the Dockerfile and identify any necessary
supporting work from there. This may be more of a top-down approach given that
it may operate on resources such as configuration files that may not exist, but
often such files may not be necessary if the container can be provided the
necessary information through environment variables, command arguments,
or mounting external files (all of which can keep the image more focused and
generalized).

#+BEGIN_SRC Dockerfile :tangle Dockerfile
FROM nginx
#+END_SRC
